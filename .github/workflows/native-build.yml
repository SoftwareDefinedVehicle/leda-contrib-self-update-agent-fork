name: CMake native build and unit tests

on:
  push:
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build_for_architecture:
    strategy:
      matrix:
        arch: [amd64, arm64]
    runs-on: [ ubuntu-latest ]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    # Remove apt repos that are known to break from time to time 
    # See https://github.com/actions/virtual-environments/issues/323  
    - name: Remove broken apt repos [Ubuntu]
      run: |
        for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done

    - name: Install tools
      run: |
        sudo apt-get install apt-transport-https --yes
        sudo apt-get -y update
        sudo apt-get -y upgrade
        sudo apt-get -y install autoconf binutils cmake file \
        gcc g++ git libtool make \
        build-essential libcurl4-openssl-dev \
        binutils-aarch64-linux-gnu gcc-9-aarch64-linux-gnu g++-9-aarch64-linux-gnu \
        python3 python3-pip python3-setuptools python3-wheel ninja-build python3-pip \
        libselinux1-dev libmount-dev libmount1 libblkid-dev
        pip3 install meson

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build for ${{ matrix.arch }}
      run: |
        mkdir build_${{ matrix.arch }} 
        ln -s build_${{ matrix.arch }} build
        ./scripts/build_openssl_${{ matrix.arch }}.sh
        ./scripts/build_glib_${{ matrix.arch }}.sh
        cd build_${{ matrix.arch }}
        cmake -DCMAKE_INSTALL_PREFIX=../dist_${{ matrix.arch }} -DCMAKE_TOOLCHAIN_FILE=../cmake/linux/${{ matrix.arch }}/toolchain.cmake -DOPENSSL_ROOT_DIR=../build_${{ matrix.arch }} -DOPENSSL_CRYPTO_LIBRARY=../build_${{ matrix.arch }}/lib/libcrypto.so ..
        make

    - name: Run unit tests
    # execute tests only for the x86, as for arm the running on qemu would be required
      if: ${{ matrix.arch=='amd64' }}
      run: |
        LD_LIBRARY_PATH=./build_${{ matrix.arch }}/lib:./build_${{ matrix.arch }}/3rdparty ./build_${{ matrix.arch }}/utest/TestSDVSelfUpdateAgent

    - name: Upload ${{ matrix.arch }} artifact to workspace
      uses: actions/upload-artifact@v3
      with:
        name: sdv-self-update-agent_${{ matrix.arch }}
        path: ${{github.workspace}}/build_${{ matrix.arch }}/src/sdv-self-update-agent
